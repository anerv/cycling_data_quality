# Provide the name of the study area: (this is only used for naming plots and labelling results)
study_area: 'GeoDKCph'
#'cph_municipality'
# 'GeoDKCph'
# 'cph_geodk'

# Provide the filepath to a polygon defining the study area:
study_area_poly: '../data/ex2_cph_area/test_boundary.gpkg'
#'../data/ex2_cph_area/test_boundary.gpkg'
# '../data/ex1_cph_municipality/cphboundary.gpkg'

# Provide the CRS which should be used throughout the anaylysis. 
# Please consider that the analysis will be computing length and area, so a projected CRS should be used. 
# A geographic CRS will work, but might raise some warnings and lead to inaccuracies.
study_crs: 'EPSG:25832' # The CRS you want to use for the analysis. 

# Indicate whether a custom filter to define cycling infrastructure in OSM data will be provided. Allowed values are False or True.
use_custom_filter: False

# If use_custom_filter = Truel provide the custom filter as a dictionary here. 
custom_filter: None # Input custom filter as dictionary here. See 'cycling_infrastructure_queries' for an example of the format.

cycling_infrastructure_queries:
  A:
    "highway == 'cycleway'"
  B:
   "cycleway in ['lane','track','opposite_lane','opposite_track','shared_lane','designated','crossing']"
  C:
    "cycleway_left in ['lane','track','opposite_lane','opposite_track','shared_lane','designated','crossing']" # should shared_busway be included?
  D:
    "cycleway_right in ['lane','track','opposite_lane','opposite_track','shared_lane','designated','crossing']"
  E:
    "cycleway_both in ['lane','track','opposite_lane','opposite_track','shared_lane','designated','crossing']"

osm_cycling_infrastructure_type:
  'protected':
    - "highway == 'cycleway'"
    - "cycleway in ['track','opposite_track']"
    - "cycleway_left in ['track','opposite_track']"
    - "cycleway_right in ['track','opposite_track']"
    - "cycleway_both in ['track','opposite_track']"

  'unprotected':
    - "cycleway in ['lane','opposite_lane','shared_lane','crossing']"
    - "cycleway_left in ['lane','opposite_lane','shared_lane','crossing']"
    - "cycleway_right in ['lane','opposite_lane','shared_lane','crossing']"
    - "cycleway_both in ['lane','opposite_lane','shared_lane','crossing']"
    - "bicycle_road == 'yes'"

  'unknown':
    - "cycleway in ['designated']"
    - "cycleway_left in ['designated']"
    - "cycleway_right in ['designated']"
    - "cycleway_both in ['designated']"


# Define tags to be downloaded from OSM here. Note that any non-standard tags used in the custom filter must be included here.
osm_way_tags:
  - "access"
  - "barrier"
  - "bridge"
  - "bicycle"
  - "bicycle_road"
  - "crossing"
  - "cycleway"
  - "cycleway:left"
  - "cycleway:right"
  - "cycleway:both"
  - "cycleway:buffer"
  - "cycleway:left:buffer"
  - "cycleway:right:buffer"
  - "cycleway:both:buffer"
  - "cycleway:width"
  - "cycleway:left:width"
  - "cycleway:right:width"
  - "cycleway:both:width"
  - "cycleway:surface"
  - "foot"
  - "footway"
  - "highway"
  - "inclince"
  - "junction"
  - "layer"
  - "lit"
  - "maxspeed"
  - "maxspeed:advisory"
  - "moped"
  - "moter_vehicle"
  - "motorcar"
  - "name"
  - "oneway"
  - "oneway:bicycle"
  - "osm_id"
  - "segregated"
  - "surface"
  - "tracktype"
  - "tunnel"
  - "width"


# Define tags to be analysed when evaluating the number of missing tags.
# Must be in the form of a nested dictionary.
# The first keys indicate the overall attribute analysed. The sub-keys indicate which columns to look at depending on whether the OSM feature is mapped as a feature on a centerline or the as an individual geometry.
# For example, if highway = 'cycleway' the feature is mapped as an individual geometry. In this case, the tag 'width', if filled out, describes the width of the cycleway.
# On the other hand, if highway = 'primary' and cycleway = 'track' the cycling infrastructure is mapped as an atttribute to a road centerline and the 'width' tag refers to the main road. In this instance only the 'cycleway_width' columns is of interest.
missing_tag_analysis: 
  surface: 
    true_geometries: 
      - surface
      - cycleway_surface
    centerline:
      - cycleway_surface
  width: 
    true_geometries: 
      - width
      - cycleway_width
      - cycleway_left_width
      - cycleway_right_width
      - cycleway_both_width
    centerline:
      - cycleway_width
      - cycleway_left_width
      - cycleway_right_width
      - cycleway_both_width
  speedlimit:
    all:
      - maxspeed
  lit: 
      all:
        - lit

# Define tags that are consided incompatible and a sign of errors in the OSM data. 
# For example, if an element has been defined as cycling_infrastructure = 'yes' earlier in the analysis, it should not have bicycle = 'no' or 'dismount' or car = 'yes'
incompatible_tags_analysis:
  cycling_infrastructure:
    'yes':
      - ['bicycle','no']
      - ['bicycle','dismount']
      - ['car','yes']
  

# Define the desired width of grid cell size in meters for the grid used for local summaries of analysis resutls. 
# When evaluating the quality of road network data, using cell sizes of 1 km is usually the default (see e.g. Koukoletsos et al, 2011; Haklay, 2010; Neis et al., 2011)
# Smaller cell sizes give a better granularity, but will make some elements of the analysis slower to compute
grid_cell_size: 500 

# Specify whether a reference data set is provided. A reference data set is necessary for the extrinsic analysis. Valid values: True or False
reference_comparison: True

# Specify filepath to the reference data. Data can be GeoPackage, JSON or Shapefiles. See the README for detailed data requirements.
reference_fp: '../data/ex2_cph_area/geodk_reference.gpkg'
# GeoDK Test Area:
#'../data/ex2_cph_area/geodk_reference.gpkg'
# Copenhagen:
#'../data/ex1_cph_municipality/cph_cycling_infra.gpkg'

# Specify whether the cycling infrastructure in the reference data have been mapped as centerlines or true geometries.
# Describes whether cycling infrastructure is digitised as one line per road segment (regardless of whether there are cycling infrastructure along both sides)
# or if there are two distinct geometries mapped in situations with a bike path/track on both sides of a street.
# Can be a value describing the whole dataset or the name of the column describing the situation for each row.
# Valid values are: 'centerline' or 'true_geometries' or a string with the name of the column with either True or False for each geometry.
reference_geometries: true_geometries # Alternative: centerline. 

# Specify whether the infrastructure geometries are designed for travelling in both directions (i.e. bidirectional) or only one way.
# This information is used to assess the true value of the network so that e.g. broad bidirectional bike lanes' length are counted twice since they represent the same infrastructure as two narrow lanes on each side of the road.
# If geometries are mapped as centerlines but represent infrastructure in both sides of the street (see 'reference_geometries'), this column should also be set to True.
# Can be a value describing the whole dataset or the name of the column describing the situation for each row.
# Valid values are: True or False or a string with the name of the column with either True or False for each geometry.
bidirectional: False 

# Specify a dictionary used for classifying segments of cycling infrastructure as protected or unprotected.
# For protected, unprotected or mixed (protected on one side, unprotected on the other side) specify the query defining the type
ref_cycling_infrastructure_type: 
  protected:
    - "vejklasse ==  'Cykelsti langs vej'"
  unprotected:
    - "vejklasse == 'Cykelbane langs vej'"
  # mixed: # Only provide mixed query if relevant
  #   - ""

# Specify the column name (string) of the column in the reference data with the unique ID for each row/feature.
reference_id_col: 'fot_id'

# Specify whether the extrinsic analysis should include feature matching. This part is more computationally expensive and will take a while
# Valid values: True or False
feature_matching: True